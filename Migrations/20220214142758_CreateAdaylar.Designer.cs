// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewKaratIk.Data;

#nullable disable

namespace NewKaratIk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220214142758_CreateAdaylar")]
    partial class CreateAdaylar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Aday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KvkkOnayi")
                        .HasColumnType("bit");

                    b.Property<string>("NameSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PozisyonId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PozisyonId");

                    b.ToTable("Adays");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.AdayOnaylama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdayId")
                        .HasColumnType("int");

                    b.Property<string>("Onay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdayId");

                    b.HasIndex("UserId");

                    b.ToTable("AdayOnaylamas");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.InterviewUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IsTeknik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("interviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("interviewId");

                    b.ToTable("InterviewUsers");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdayId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ilaveNot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("interviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("isDone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdayId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.MulakatDegerlendirme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdayId")
                        .HasColumnType("int");

                    b.Property<double?>("Puan")
                        .HasColumnType("float");

                    b.Property<string>("aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("mulakId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdayId");

                    b.HasIndex("mulakId");

                    b.HasIndex("userId");

                    b.ToTable("MulakatDegerlendirmes");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Nitelik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PozisyonId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PozisyonId");

                    b.ToTable("Niteliks");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Ozluk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdliSicil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AileBildirimFormu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AskerlikBelgesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotograf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KanGrubu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaasHesapIbanNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Muvakatname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NufusCuzdanFotok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NufusKayitOrnegi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tcno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("YerlisimYeri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isBasvuruFormu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iskurKayit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kursBelgeleri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ogrenimBlegesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("saglikRaporu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ozluks");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Pozisyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("GorevTanimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seviye")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("pozSayisi")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Pozisyons");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.TeklifFormu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdayId")
                        .HasColumnType("int");

                    b.Property<string>("IlaveNot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TeklifDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeklifFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imzaliTeklifFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeklifFormus");
                });

            modelBuilder.Entity("NewKaratIk.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FirstLevelManager")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOzluk")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameSurname")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("[Name]+' '+[Surname]");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PozisyonId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PozisyonId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NewKaratIk.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NewKaratIk.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewKaratIk.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NewKaratIk.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Aday", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Pozisyon", "Pozisyon")
                        .WithMany()
                        .HasForeignKey("PozisyonId");

                    b.Navigation("Pozisyon");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.AdayOnaylama", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Aday", "Aday")
                        .WithMany()
                        .HasForeignKey("AdayId");

                    b.HasOne("NewKaratIk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Aday");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.InterviewUser", b =>
                {
                    b.HasOne("NewKaratIk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("NewKaratIk.Models.CustomModels.interview", "Interview")
                        .WithMany("InterviewUsers")
                        .HasForeignKey("interviewId");

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.interview", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Aday", "Aday")
                        .WithMany("interviewList")
                        .HasForeignKey("AdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aday");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.MulakatDegerlendirme", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Aday", "Aday")
                        .WithMany()
                        .HasForeignKey("AdayId");

                    b.HasOne("NewKaratIk.Models.CustomModels.interview", "Interview")
                        .WithMany()
                        .HasForeignKey("mulakId");

                    b.HasOne("NewKaratIk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("Aday");

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Nitelik", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Pozisyon", "Pozisyon")
                        .WithMany("NitelikList")
                        .HasForeignKey("PozisyonId");

                    b.Navigation("Pozisyon");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Ozluk", b =>
                {
                    b.HasOne("NewKaratIk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Pozisyon", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Department", "Department")
                        .WithMany("PozisyonList")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("NewKaratIk.Models.User", b =>
                {
                    b.HasOne("NewKaratIk.Models.CustomModels.Department", null)
                        .WithMany("UsersList")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NewKaratIk.Models.CustomModels.Pozisyon", "Pozisyon")
                        .WithMany("UserList")
                        .HasForeignKey("PozisyonId");

                    b.Navigation("Pozisyon");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Aday", b =>
                {
                    b.Navigation("interviewList");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Department", b =>
                {
                    b.Navigation("PozisyonList");

                    b.Navigation("UsersList");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.interview", b =>
                {
                    b.Navigation("InterviewUsers");
                });

            modelBuilder.Entity("NewKaratIk.Models.CustomModels.Pozisyon", b =>
                {
                    b.Navigation("NitelikList");

                    b.Navigation("UserList");
                });
#pragma warning restore 612, 618
        }
    }
}
